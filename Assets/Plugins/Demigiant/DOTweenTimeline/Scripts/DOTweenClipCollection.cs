// Author: Daniele Giardini - http://www.demigiant.com
// Created: 2020/01/16

using System;
using System.Collections.Generic;
using DG.Tweening.Timeline.Core;
using UnityEngine;
using UnityEngine.Serialization;

namespace DG.Tweening.Timeline
{
    /// <summary>
    /// This is meant as a utility Component that contains list of <see cref="DOTweenClip"/> elements.
    /// If you prefer to control <see cref="DOTweenClip"/> elements directly (I do) you can do that
    /// by directly adding serialized <see cref="DOTweenClip"/> elements to your own Components
    /// </summary>
    [AddComponentMenu("DOTween/DOTween ClipCollection")]
    public class DOTweenClipCollection : MonoBehaviour
    {
        #region Serialized
#pragma warning disable 0649

        [HideInInspector]
        public bool killTweensOnDestroy = true;
        [FormerlySerializedAs("sequences")]
        public DOTweenClip[] clips = new []{ new DOTweenClip(Guid.NewGuid().ToString(), null) };

#pragma warning restore 0649
        #endregion

        #region Unity

        void Start()
        {
            int len = clips.Length;
            if (DOTweenTimelineSettings.I.debugLogs) {
                DOLog.Normal(string.Format("DOTweenClipCollection <color=#d568e3>{0}</color> : Startup, iterating through {1} DOTweenClips", this.name, len), this);
            }
            for (int i = 0; i < len; ++i) {
                if (clips[i].isActive && !clips[i].HasTween()) clips[i].GenerateTween();
            }
        }

        void OnDestroy()
        {
            if (!killTweensOnDestroy) return;

            for (int i = 0; i < clips.Length; ++i) clips[i].KillTween();
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Creates and starts (or restarts) all this collection's clips' tweens
        /// (unless their <see cref="DOTweenClip.isActive"/> toggle is disabled).
        /// This will ignore the clips' startup behaviour set in the Inspector and will either:<para/>
        /// - If the clip's tween had not been created already or had been killed: creates it and plays it immediately.<para/>
        /// - If the clip's tween already exists: plays it or restarts it based on the given parameters.
        /// </summary>
        /// <param name="restartIfExists">If TRUE (default) and a clip's tween was already generated and exists,
        /// rewinds it and replays it from the beginning, otherwise simply plays it from where it is</param>
        public void PlayAll(bool restartIfExists = true)
        {
            for (int i = 0; i < clips.Length; ++i) clips[i].GenerateTween(StartupBehaviour.Create, true, restartIfExists);
        }

        /// <summary>
        /// Returns the first <see cref="DOTweenClip"/> element in this collection that has the given name, or NULL if none was found.<para/>
        /// NOTE: in case you have multiple <see cref="DOTweenClip"/> elements with the same name and want to return them all,
        /// use <code>GetClipsByName</code> instead.
        /// </summary>
        public DOTweenClip GetClipByName(string clipName)
        {
            int len = clips.Length;
            for (int i = 0; i < len; ++i) {
                if (clips[i].name == clipName) return clips[i];
            }
            return null;
        }

        /// <summary>
        /// Returns a list of this collection's <see cref="DOTweenClip"/> elements that have the given name, or NULL if none was found.
        /// </summary>
        public List<DOTweenClip> GetClipsByName(string clipName)
        {
            List<DOTweenClip> result = null;
            GetClipsByName(clipName, ref result);
            return result;
        }
        /// <summary>
        /// Adds to the given list all of this collection's <see cref="DOTweenClip"/> elements that have the given name.<para/>
        /// Note that this method doesn't clear <see cref="fillList"/> before adding elements,
        /// nor initializes it if no corresponding <see cref="DOTweenClip"/> is found
        /// (which means that if you pass a NULL <see cref="fillList"/> it will remain NULL in case there are no matches).
        /// </summary>
        public void GetClipsByName(string clipName, ref List<DOTweenClip> fillList)
        {
            int len = clips.Length;
            for (int i = 0; i < len; ++i) {
                if (clips[i].name != clipName) continue;
                if (fillList == null) fillList = new List<DOTweenClip>();
                fillList.Add(clips[i]);
            }
        }

        #region Control Methods

        /// <summary>
        /// Kills all tweens generated by this clipCollection
        /// </summary>
        /// <param name="complete">If TRUE completes the tween before killing it</param>
        public void KillAllTweens(bool complete = false)
        {
            for (int i = 0; i < clips.Length; ++i) clips[i].KillTween(complete);
        }

        /// <summary>
        /// Stops and rewinds the tweens generated by this clipCollection. Does nothing for tweens that haven't been generated yet or have been killed.
        /// </summary>
        /// <param name="includeDelay">If TRUE includes the eventual delay set on the clip</param>
        public void RewindAllTweens(bool includeDelay = true)
        {
            for (int i = 0; i < clips.Length; ++i) clips[i].RewindTween(includeDelay);
        }

        /// <summary>
        /// Completes the tweens generated by this clipCollection. Does nothing for tweens that haven't been generated yet or have been killed.
        /// </summary>
        /// <param name="withCallbacks">If TRUE will fire all internal callbacks up from the current position to the end, otherwise will ignore them</param>
        public void CompleteAllTweens(bool withCallbacks = false)
        {
            for (int i = 0; i < clips.Length; ++i) clips[i].CompleteTween(withCallbacks);
        }

        /// <summary>
        /// Restarts the tweens generated by this clipCollection from the beginning. Does nothing for tweens that haven't been generated yet or have been killed.
        /// </summary>
        /// <param name="includeDelay">If TRUE includes the eventual delay set on the clip</param>
        public void RestartAllTweens(bool includeDelay = true)
        { RestartAllTweens(includeDelay, -1f); }
        /// <summary>
        /// Restarts the tweens generated by this clipCollection from the beginning. Does nothing for tweens that haven't been generated yet or have been killed.
        /// </summary>
        /// <param name="includeDelay">If TRUE includes the eventual delay set on the clip</param>
        /// <param name="changeDelayTo">If <see cref="includeDelay"/> is true and this value is bigger than 0 assigns it as the new delay</param>
        public void RestartAllTweens(bool includeDelay, float changeDelayTo)
        {
            for (int i = 0; i < clips.Length; ++i) clips[i].RestartTween(includeDelay, changeDelayTo);
        }

        /// <summary>
        /// Regenerates the tweens generated by this clipCollection and restarts them from the current targets state
        /// (meaning all dynamic elements values will be re-evaluated).
        /// </summary>
        /// <param name="includeDelay">If TRUE includes the eventual delay set on the clip</param>
        public void RestartAllTweensFromHere(bool includeDelay = true)
        { RestartAllTweensFromHere(includeDelay, -1f); }
        /// <summary>
        /// Regenerates the tweens generated by this clipCollection and restarts them from the current targets state
        /// (meaning all dynamic elements values will be re-evaluated).
        /// </summary>
        /// <param name="includeDelay">If TRUE includes the eventual delay set on the clip</param>
        /// <param name="changeDelayTo">If <see cref="includeDelay"/> is true and this value is bigger than 0 assigns it as the new delay</param>
        public void RestartAllTweensFromHere(bool includeDelay, float changeDelayTo)
        {
            for (int i = 0; i < clips.Length; ++i) clips[i].RestartTweenFromHere(includeDelay, changeDelayTo);
        }

        /// <summary>
        /// Pauses the tweens generated by this clipCollection. Does nothing for tweens that haven't been generated yet or have been killed.
        /// </summary>
        public void PauseAllTweens()
        {
            for (int i = 0; i < clips.Length; ++i) clips[i].PauseTween();
        }

        /// <summary>
        /// Resumes the tweens generated by this clipCollection. Does nothing for tweens that haven't been generated yet or have been killed.
        /// </summary>
        public void PlayAllTweens()
        {
            for (int i = 0; i < clips.Length; ++i) clips[i].PlayTween();
        }

        /// <summary>
        /// Resumes the tweens generated by this clipCollection and plays them backwards. Does nothing for tweens that haven't been generated yet or have been killed.
        /// </summary>
        public void PlayAllTweensBackwards()
        {
            for (int i = 0; i < clips.Length; ++i) clips[i].PlayTweenBackwards();
        }

        /// <summary>
        /// Resumes the tweens generated by this clipCollection and plays them forward. Does nothing for tweens that haven't been generated yet or have been killed.
        /// </summary>
        public void PlayAllTweensForward()
        {
            for (int i = 0; i < clips.Length; ++i) clips[i].PlayTweenForward();
        }

        #endregion

        #endregion
    }
}